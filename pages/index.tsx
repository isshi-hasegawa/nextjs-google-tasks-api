import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { signIn, signOut, useSession } from 'next-auth/react';
import axios from 'axios';
import { useEffect, useState } from 'react';

const BaseUrl = 'https://tasks.googleapis.com';

type TaskList = {
  id: string;
  title: string;
  tasks: Task[];
};

type Task = {
  id: string;
  name: string;
};

const Home: NextPage = () => {
  const { data: session, status } = useSession();
  const accessToken = session?.accessToken;
  const [taskList, setTaskList] = useState<TaskList>();

  useEffect(() => {
    const setFirstTaskList = async (accessToken: string | unknown) => {
      const firstList = await loadFirstTaskList(accessToken);
      const tasks = await loadTasks(firstList.id);

      setTaskList({
        id: firstList.id,
        title: firstList.title,
        tasks,
      } as TaskList);
    };
    if (accessToken) {
      setFirstTaskList(accessToken);
    }
  }, [accessToken]);

  const loadFirstTaskList = async (accessToken: string | unknown) => {
    const res = await axios
      .get(`${BaseUrl}/tasks/v1/users/@me/lists`, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      })
      .then((res) => {
        return res.data.items[0];
      })
      .catch((e) => console.log(e));
    return res;
  };

  const loadTasks = async (id: string) => {
    const res = await axios.get(`${BaseUrl}/tasks/v1/lists/${id}/tasks`, {
      headers: { Authorization: `Bearer ${accessToken}` },
    });
    if (!res.data.items) {
      return [];
    }
    return await res.data.items.map((t: any) => {
      return { id: t.id, name: t.title } as Task;
    });
  };

  const reload = async () => {
    if (!taskList) {
      return;
    }
    const tasks = await loadTasks(taskList.id);
    setTaskList({ id: taskList.id, title: taskList.title, tasks } as TaskList);
  };

  const create = async () => {
    if (!taskList) {
      return;
    }
    await axios.post(
      `${BaseUrl}/tasks/v1/lists/${taskList.id}/tasks`,
      { title: `task${taskList.tasks.length + 1}` },
      { headers: { Authorization: `Bearer ${accessToken}` } }
    );
    reload();
  };

  const remove = async () => {
    if (!taskList) {
      return;
    }
    await axios.delete(
      `${BaseUrl}/tasks/v1/lists/${taskList.id}/tasks/${taskList.tasks[0].id}`,
      {
        headers: { Authorization: `Bearer ${accessToken}` },
      }
    );
    reload();
  };

  return (
    <>
      <Head>
        <title>Next.js Google Tasks API</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {status === 'unauthenticated' && (
          <>
            Not signed in <br />
            <button onClick={() => signIn()}>Sign in</button>
          </>
        )}
        {status === 'loading' && <>Loading ...</>}
        {status === 'authenticated' && (
          <>
            Signed in as{' '}
            <Image
              src={session.user?.image ?? ''}
              alt=""
              width={50}
              height={50}
            />{' '}
            {session.user?.name ?? ''} <br />
            AccessToken : {accessToken} <br />
            <button onClick={() => signOut()}>Sign out</button>
            <h2>{taskList?.title}</h2>
            <button onClick={create}>create</button>
            <button onClick={remove}>delete</button>
            {taskList?.tasks?.map((e) => (
              <div key={e.id}>{e.name}</div>
            ))}
          </>
        )}
      </main>
    </>
  );
};

export default Home;
